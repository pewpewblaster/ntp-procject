# Form implementation generated from reading ui file '.\http_clinet.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6 import QtCore, QtWidgets
import requests
import time
import os

class DownloadThread(QtCore.QThread):
    update_progress = QtCore.pyqtSignal(int, int, int)
    download_complete = QtCore.pyqtSignal()
    download_stopped = QtCore.pyqtSignal()

    def __init__(self, url, filename, speed_limit_kb, parent=None):
        super().__init__(parent)
        self.url = url
        self.filename = filename
        self.speed_limit_kb = speed_limit_kb
        self.stopped = False

    def run(self):
        try:
            response = requests.get(self.url, stream=True)
            total_size = int(response.headers.get('content-length', 0))
            download_dir = os.path.join(os.getcwd(), 'images')
            
            filename = os.path.join(download_dir, self.url.split('/')[-1])

            with open(filename, 'wb') as file:
                start_time = time.time()
                downloaded = 0
                for chunk in response.iter_content(chunk_size=1024):
                    if self.stopped:
                        break

                    elapsed_time = max(1, time.time() - start_time)
                    if self.speed_limit_kb and elapsed_time < downloaded / self.speed_limit_kb:
                        time.sleep((downloaded / self.speed_limit_kb) - elapsed_time)

                    file.write(chunk)
                    downloaded += len(chunk)
                    download_speed_kb = int(downloaded / elapsed_time)
                    self.update_progress.emit(downloaded * 100 // total_size, downloaded // 1024, download_speed_kb)

                if not self.stopped:
                    self.download_complete.emit()
                else:
                    self.download_stopped.emit()
        except requests.exceptions.MissingSchema:
            print("Invalid URL format. Make sure to include 'http://' or 'https://'.")
            self.download_complete.emit()
            
class Ui_download_client(object):
    def setupUi(self, download_client):
        download_client.setObjectName("download_client")
        download_client.setFixedSize(310, 317)
        self.download_thread = None

        
        """ labels """
        self.label_url = QtWidgets.QLabel(parent=download_client)
        self.label_url.setGeometry(QtCore.QRect(20, 10, 271, 16))
        self.label_url.setObjectName("label_url")
        self.lineEdit_url = QtWidgets.QLineEdit(parent=download_client)
        self.lineEdit_url.setGeometry(QtCore.QRect(20, 30, 271, 20))
        self.lineEdit_url.setObjectName("lineEdit_url")
        self.label_speed = QtWidgets.QLabel(parent=download_client)
        self.label_speed.setGeometry(QtCore.QRect(20, 60, 271, 16))
        self.label_speed.setObjectName("label_speed")
        self.lineEdit_speed = QtWidgets.QLineEdit(parent=download_client)
        self.lineEdit_speed.setGeometry(QtCore.QRect(20, 80, 271, 20))
        self.lineEdit_speed.setObjectName("lineEdit_speed")
        self.label_download_speed = QtWidgets.QLabel(parent=download_client)
        self.label_download_speed.setGeometry(QtCore.QRect(20, 220, 101, 16))
        self.label_download_speed.setObjectName("label_download_speed")
        # self.label_percentage = QtWidgets.QLabel(parent=download_client)
        # self.label_percentage.setGeometry(QtCore.QRect(20, 200, 101, 16))
        # self.label_percentage.setObjectName("label_percentage")
        self.label_downloaded = QtWidgets.QLabel(parent=download_client)
        self.label_downloaded.setGeometry(QtCore.QRect(20, 240, 101, 16))
        self.label_downloaded.setObjectName("label_downloaded")
        # self.label_percentage_show = QtWidgets.QLabel(parent=download_client)
        # self.label_percentage_show.setGeometry(QtCore.QRect(130, 200, 101, 16))
        # self.label_percentage_show.setObjectName("label_percentage_show")
        self.label_download_speed_show_2 = QtWidgets.QLabel(parent=download_client)
        self.label_download_speed_show_2.setGeometry(QtCore.QRect(130, 240, 101, 16))
        self.label_download_speed_show_2.setObjectName("label_download_speed_show_2")
        self.label_download_speed_show = QtWidgets.QLabel(parent=download_client)
        self.label_download_speed_show.setGeometry(QtCore.QRect(130, 220, 101, 16))
        self.label_download_speed_show.setObjectName("label_download_speed_show")
        
        """ buttons """
        self.button_250_kbps = QtWidgets.QPushButton(parent=download_client)
        self.button_250_kbps.setGeometry(QtCore.QRect(20, 110, 81, 23))
        self.button_250_kbps.setObjectName("button_250_kbps")
        self.button_500_kbps = QtWidgets.QPushButton(parent=download_client)
        self.button_500_kbps.setGeometry(QtCore.QRect(110, 110, 91, 23))
        self.button_500_kbps.setObjectName("button_500_kbps")
        self.button_1_mbps = QtWidgets.QPushButton(parent=download_client)
        self.button_1_mbps.setGeometry(QtCore.QRect(210, 110, 81, 23))
        self.button_1_mbps.setObjectName("button_1_mbps")
        self.label_progress = QtWidgets.QLabel(parent=download_client)
        self.label_progress.setGeometry(QtCore.QRect(20, 140, 271, 16))
        self.label_progress.setObjectName("label_progress")
        self.pushButton_download = QtWidgets.QPushButton(parent=download_client)
        self.pushButton_download.setGeometry(QtCore.QRect(20, 280, 131, 23))
        self.pushButton_download.setObjectName("pushButton_download")
        self.pushButton_stop_download = QtWidgets.QPushButton(parent=download_client)
        self.pushButton_stop_download.setGeometry(QtCore.QRect(160, 280, 131, 23))
        self.pushButton_stop_download.setObjectName("pushButton_stop_download")
        
        # buttons clicked events
        self.button_250_kbps.clicked.connect(self.set_250_kbps)
        self.button_500_kbps.clicked.connect(self.set_500_kbps)
        self.button_1_mbps.clicked.connect(self.set_1_mbps)
        self.pushButton_download.clicked.connect(self.start_download)
        self.pushButton_stop_download.clicked.connect(self.stop_download)
        
        
        """ progress bar """
        self.progressBar = QtWidgets.QProgressBar(parent=download_client)
        self.progressBar.setGeometry(QtCore.QRect(20, 160, 261, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        # by default progress bar is set to 24%, even if no downloads were started
        # here we put it on 0% when widget opens
        self.progressBar.setValue(0)



        self.retranslateUi(download_client)
        QtCore.QMetaObject.connectSlotsByName(download_client)

    """ custom funcitons """

    def set_250_kbps(self):
        self.lineEdit_speed.setText("250")
    def set_500_kbps(self):
        self.lineEdit_speed.setText("500")
    def set_1_mbps(self):
        self.lineEdit_speed.setText("1000")
    
    def start_download(self):
        url = self.lineEdit_url.text()
        speed_limit = int(self.lineEdit_speed.text()) if self.lineEdit_speed.text().isdigit() else 0
        # by default speed is in byte, here we convert it to kilobtes
        speed_limit *= 1024
        download_dir = os.path.join(os.getcwd(), 'images')
        filename = os.path.join(download_dir, url.split('/')[-1])
        
        self.progressBar.setValue(0)
        # self.label_percentage_show.setText('0%')
        self.label_download_speed_show.setText('0 KB/s')
        self.label_download_speed_show_2.setText('0 KB')
        self.pushButton_download.setEnabled(False)
        self.pushButton_stop_download.setEnabled(True)

        self.download_thread = DownloadThread(url, filename, speed_limit)
        self.download_thread.update_progress.connect(self.update_progress)
        self.download_thread.download_complete.connect(self.download_complete)
        self.download_thread.download_stopped.connect(self.download_stopped)
        self.download_thread.start()

    def stop_download(self):
        if self.download_thread:
            self.download_thread.stopped = True
            self.pushButton_stop_download.setEnabled(False)

    def update_progress(self, percentage, downloaded_kb, speed_kb):
        self.progressBar.setValue(percentage)
        # self.label_percentage_show.setText(f'{percentage}%')
        self.label_download_speed_show.setText(f'{speed_kb / 1024 :.0f} KB/s')
        self.label_download_speed_show_2.setText(f'{downloaded_kb} KB')

    def download_complete(self):
        self.pushButton_download.setEnabled(True)
        self.pushButton_stop_download.setEnabled(False)
        print("Download complete!")

    def download_stopped(self):
        self.pushButton_download.setEnabled(True)
        self.pushButton_stop_download.setEnabled(False)
        print("Download stopped.")
        
    def retranslateUi(self, download_client):
        _translate = QtCore.QCoreApplication.translate
        download_client.setWindowTitle(_translate("download_client", "Download cilent"))
        self.label_url.setText(_translate("download_client", "Enter url here:"))
        self.label_speed.setText(_translate("download_client", "Speed limit in KB/s:"))
        self.button_250_kbps.setText(_translate("download_client", "250 KB/s"))
        self.button_500_kbps.setText(_translate("download_client", "500 KB/s"))
        self.button_1_mbps.setText(_translate("download_client", "1 MB/s"))
        self.label_progress.setText(_translate("download_client", "Progress:"))
        self.label_download_speed.setText(_translate("download_client", "Download speed:"))
        # self.label_percentage.setText(_translate("download_client", "Percentage:"))
        self.label_downloaded.setText(_translate("download_client", "Downloaded:"))
        # self.label_percentage_show.setText(_translate("download_client", "None"))
        self.label_download_speed_show_2.setText(_translate("download_client", "None"))
        self.label_download_speed_show.setText(_translate("download_client", "None"))
        self.pushButton_download.setText(_translate("download_client", "Download"))
        self.pushButton_stop_download.setText(_translate("download_client", "Stop Download"))
