# Form implementation generated from reading ui file '.\soap_client.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtGui import QFont, QPalette, QColor
import requests
import multiprocessing


class Ui_soap_client(object):
    
    class SOAP_request():
        def __init__(self, country_code):
            self.country_code = country_code
            self.request_url = "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso"
            self.response_status_code = None
            self.response = None
            self.payload = f"""<?xml version=\"1.0\" encoding=\"utf-8\"?>
            <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
              <soap:Body>
                <CountryCurrency xmlns="http://www.oorsprong.org/websamples.countryinfo">
                  <sCountryISOCode>{self.country_code }</sCountryISOCode>
                </CountryCurrency>
              </soap:Body>
            </soap:Envelope>"""
            self.headers = {
                'Content-Type': 'text/xml; charset=utf-8'
                }
        
        def get_request(self):
            try:
                self.response = requests.request("POST", self.request_url, headers=self.headers, data=self.payload)
                self.response_status_code = self.response.status_code
            except Exception as e:
                return "fail"
            
        def return_request_data(self):
            return self.response.text, self.response_status_code
            
    def setupUi(self,
                soap_client,
                language,
                app_settings):
        soap_client.setObjectName("soap_client")
        soap_client.setFixedSize(707, 377)
        self.soap_client = soap_client
        
        self.selected_language = language
        self.app_settings = app_settings
        
        """Application settings"""
        font = QFont(self.app_settings["font_name"],
                     self.app_settings["font_size"])
        self.soap_client.setFont(font)

        palette = QPalette()
        # font color
        palette.setColor(QPalette.ColorRole.WindowText,
                         QColor(*self.app_settings["font_color"]))
        # background color
        palette.setColor(QPalette.ColorRole.Window, 
                         QColor(*self.app_settings["background_color"]))
        self.soap_client.setPalette(palette)     
        
        self.list_country_codes = [
            "Croatia - HR",
            "United States - US",
            "Canada - CA",
            "Australia - AU",
            "Great Britain - GB",
            "China - CN",
            "Japan - JP",
            "Germany - DE",
            "India - IN",
            "France - FR",
            "Brazil - BR",
            "Italy - IT",
            "South Korea - KR",
            "Russia - RU",
            "Spain - ES",
            "Mexico - MX",
            "Indonesia - ID",
            "Netherlands - NL",
            "Saudi Arabia - SA",
            "Turkey - TR",
            "Switzerland - CH"
        ]
                
        
        """ Country Codes """
        self.listWidget_country_codes = QtWidgets.QListWidget(parent=soap_client)
        self.listWidget_country_codes.setGeometry(QtCore.QRect(20, 30, 151, 192))
        self.listWidget_country_codes.setObjectName("listView_country_codes")
        
        for codes in self.list_country_codes:
            self.listWidget_country_codes.addItem(codes)
        self.listWidget_country_codes.itemClicked.connect(self.select_country_code)

        self.label_country_codes = QtWidgets.QLabel(parent=soap_client)
        self.label_country_codes.setGeometry(QtCore.QRect(20, 10, 151, 16))
        self.label_country_codes.setObjectName("label_country_codes")
        self.label_enter_country_code = QtWidgets.QLabel(parent=soap_client)
        self.label_enter_country_code.setGeometry(QtCore.QRect(20, 236, 151, 20))
        self.label_enter_country_code.setObjectName("label_enter_country_code")
        self.lineEdit_enter_country_code = QtWidgets.QLineEdit(parent=soap_client)
        self.lineEdit_enter_country_code.setGeometry(QtCore.QRect(20, 260, 151, 20))
        self.lineEdit_enter_country_code.setObjectName("lineEdit_enter_country_code")
        self.pushButton_send_request = QtWidgets.QPushButton(parent=soap_client)
        self.pushButton_send_request.setGeometry(QtCore.QRect(20, 290, 151, 23))
        self.pushButton_send_request.setObjectName("pushButton_send_request")
        self.pushButton_send_request.clicked.connect(self.send_soap_request)
        
        """ SOAP message textbox """
        self.textBrowser_soap_message = QtWidgets.QTextBrowser(parent=soap_client)
        self.textBrowser_soap_message.setGeometry(QtCore.QRect(190, 30, 491, 192))
        self.textBrowser_soap_message.setObjectName("textBrowser_soap_message")
        self.label_request_code = QtWidgets.QLabel(parent=soap_client)
        self.label_request_code.setGeometry(QtCore.QRect(200, 230, 81, 16))
        self.label_request_code.setObjectName("label_request_code")
        self.label_show_request_code = QtWidgets.QLabel(parent=soap_client)
        self.label_show_request_code.setGeometry(QtCore.QRect(290, 230, 61, 16))
        self.label_show_request_code.setObjectName("label_show_request_code")
        self.label = QtWidgets.QLabel(parent=soap_client)
        self.label.setGeometry(QtCore.QRect(190, 10, 491, 16))
        self.label.setObjectName("label")

        self.retranslateUi(soap_client)
        QtCore.QMetaObject.connectSlotsByName(soap_client)

    
    def select_country_code(self, item):
        # gets the index of the clicked item on the 
        clicked_index = self.listWidget_country_codes.row(item)  # Get the index of the clicked item
        # splits string into 2 strings and returns the second one (country code)
        country_code = self.list_country_codes[clicked_index].split(" - ")[1]
        self.lineEdit_enter_country_code.setText(country_code)    
    
    # process A
    def send_soap_request(self):
        self.soap_job = Ui_soap_client.SOAP_request(self.lineEdit_enter_country_code.text())

        # Communication between processe A and process B
        self.process_B = multiprocessing.Process(target=self.soap_job.get_request()) # get_request() - Process B
        self.process_B.start()
        self.process_B.join()
        self.process_B_exit_code = self.process_B.exitcode
        
        if self.process_B_exit_code == 0:
            self.soap_message, self.soap_status_code = self.soap_job.return_request_data()
            self.label_show_request_code.setText(str(self.soap_status_code))
            self.textBrowser_soap_message.append(self.soap_message)
            self.textBrowser_soap_message.append("\n\n")
        
            self.show_popup_message(self.success_title,
                                    self.success_message + str(self.process_B_exit_code))
        else:
            self.show_popup_message(self.error_title,
                                    self.error_message + str(self.process_B_exit_code))

    def show_popup_message(self, title, message):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.exec()
        
    def retranslateUi(self, soap_client):
        
        if self.selected_language == "English": 
            _translate = QtCore.QCoreApplication.translate
            soap_client.setWindowTitle(_translate("soap_client", "SOAP client"))
            self.label_country_codes.setText(_translate("soap_client", "Country codes:"))
            self.label_enter_country_code.setText(_translate("soap_client", "Enter country code:"))
            self.pushButton_send_request.setText(_translate("soap_client", "Send request"))
            self.label_request_code.setText(_translate("soap_client", "Status code:"))
            self.label_show_request_code.setText(_translate("soap_client", "None"))
            self.label.setText(_translate("soap_client", "SOAP message:"))
            self.success_message = "JOB finished - exited with code: "
            self.error_message = "JOB failed - exited with code"
            self.error_title = "Error"
            self.success_title = "Success"
            
        if self.selected_language == "Croatian":
            _translate = QtCore.QCoreApplication.translate
            soap_client.setWindowTitle(_translate("soap_client", "SOAP klijent"))
            self.label_country_codes.setText(_translate("soap_client", "Šifre zemalja:"))
            self.label_enter_country_code.setText(_translate("soap_client", "Unesite šifru zemlje:"))
            self.pushButton_send_request.setText(_translate("soap_client", "Pošaljite zahtjev"))
            self.label_request_code.setText(_translate("soap_client", "Statusna šifra:"))
            self.label_show_request_code.setText(_translate("soap_client", "Nema"))
            self.label.setText(_translate("soap_client", "SOAP poruka:"))
            self.success_message = "ZADATAK završen - izlaz s kodom: "
            self.error_message = "ZADATAK nije uspio - izlaz s kodom"
            self.error_title = "Greška"
            self.success_title = "Uspjeh"

        if self.selected_language == "German":
            _translate = QtCore.QCoreApplication.translate
            soap_client.setWindowTitle(_translate("soap_client", "SOAP-Client"))
            self.label_country_codes.setText(_translate("soap_client", "Ländercodes:"))
            self.label_enter_country_code.setText(_translate("soap_client", "Geben Sie den Ländercode ein:"))
            self.pushButton_send_request.setText(_translate("soap_client", "Anfrage senden"))
            self.label_request_code.setText(_translate("soap_client", "Statuscode:"))
            self.label_show_request_code.setText(_translate("soap_client", "Keine"))
            self.label.setText(_translate("soap_client", "SOAP-Nachricht:"))
            self.success_message = "AUFGABE abgeschlossen - beendet mit Code: "
            self.error_message = "AUFGABE fehlgeschlagen - beendet mit Code"
            self.error_title = "Fehler"
            self.success_title = "Erfolg"


        if self.selected_language == "Spanish":
            _translate = QtCore.QCoreApplication.translate
            soap_client.setWindowTitle(_translate("soap_client", "Cliente SOAP"))
            self.label_country_codes.setText(_translate("soap_client", "Códigos de país:"))
            self.label_enter_country_code.setText(_translate("soap_client", "Ingrese el código de país:"))
            self.pushButton_send_request.setText(_translate("soap_client", "Enviar solicitud"))
            self.label_request_code.setText(_translate("soap_client", "Código de estado:"))
            self.label_show_request_code.setText(_translate("soap_client", "Ninguno"))
            self.label.setText(_translate("soap_client", "Mensaje SOAP:"))
            self.success_message = "TRABAJO terminado - salió con código: "
            self.error_message = "TRABAJO fallido - salió con código"
            self.error_title = "Error"
            self.success_title = "Éxito"


        if self.selected_language == "French":
            _translate = QtCore.QCoreApplication.translate
            soap_client.setWindowTitle(_translate("soap_client", "Client SOAP"))
            self.label_country_codes.setText(_translate("soap_client", "Codes pays :"))
            self.label_enter_country_code.setText(_translate("soap_client", "Entrez le code pays :"))
            self.pushButton_send_request.setText(_translate("soap_client", "Envoyer la demande"))
            self.label_request_code.setText(_translate("soap_client", "Code de statut :"))
            self.label_show_request_code.setText(_translate("soap_client", "Aucun"))
            self.label.setText(_translate("soap_client", "Message SOAP :"))
            self.success_message = "TRAVAIL terminé - sorti avec le code : "
            self.error_message = "TRAVAIL échoué - sorti avec le code"
            self.error_title = "Erreur"
            self.success_title = "Succès"
      