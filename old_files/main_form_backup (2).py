# Form implementation generated from reading ui file '.\database_view_window.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from access_connector import (import_product,
                              get_table, 
                              get_table_by_filter, 
                              import_warehouse,
                              update_warehouse,
                              update_product,
                              delete_product_by_id,
                              delete_warehouse_by_id,
                              show_table)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, selected_language, signed_user):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 675)
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        ''' '''
        self.selected_language = selected_language
        self.signed_user = signed_user
        print(f"From main_form.py class lang: {self.selected_language}, user: {self.signed_user} !!!")
        
        ''' table table - prikazuje joinanu tablicu skladista i proizvodi po ID-u - lijeva tablica na GUIu '''
        self.table_proizvodi = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.table_proizvodi.setGeometry(QtCore.QRect(30, 410, 691, 201))
        self.table_proizvodi.setObjectName("table_proizvodi")
        self.table_proizvodi.setColumnCount(0)
        self.table_proizvodi.setRowCount(0)
        # klickom na header tablice pokrece se sort_table funkcija
        self.table_proizvodi.horizontalHeader().sectionClicked.connect(self.sort_table)
        self.sort_order = QtCore.Qt.SortOrder.AscendingOrder
        # liste u koju funkcija 'get_table' iz modula 'access_connector' sprema podatke o
        # podatke tablici i headeru tablice 
        self.table_proizvodi_array = None
        self.header = None
        # liste u koju funkcija 'get_table_by_filter' iz modula 'access_connector' sprema podatke o
        # podatke tablici i headeru tablice po unesenom filteru u edit box
        self.table_filter_array = None
        self.table_filter_header = None
        
        


        ''' group box information - prikaz active language, active user, date, time '''
        self.group_box_information = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.group_box_information.setGeometry(QtCore.QRect(10, 10, 311, 71))
        self.group_box_information.setObjectName("group_box_information")
        # label - pokazuje aktivan jezik ()
        self.label_active_language_show = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_active_language_show.setGeometry(QtCore.QRect(80, 40, 47, 21))
        self.label_active_language_show.setObjectName("label_active_language_show")
        self.label_active_language_show.setText(str(self.selected_language))
        
        self.label_active_user = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_active_user.setGeometry(QtCore.QRect(10, 20, 91, 21))
        self.label_active_user.setObjectName("label_active_user")
        # label - pokazuje aktivnog usera (user koji se logirao u aplikaciju)
        self.label_active_user_show = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_active_user_show.setGeometry(QtCore.QRect(80, 20, 47, 21))
        self.label_active_user_show.setObjectName("label_active_user_show")
        self.label_active_user_show.setText(str(self.signed_user))

        self.label_active_language = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_active_language.setGeometry(QtCore.QRect(10, 40, 91, 21))
        self.label_active_language.setObjectName("label_active_language")
        
        
        self.label_date = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_date.setGeometry(QtCore.QRect(180, 20, 31, 21))
        self.label_date.setObjectName("label_date")
        self.label_time_show = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_time_show.setGeometry(QtCore.QRect(220, 40, 71, 21))
        self.label_time_show.setObjectName("label_time_show")
        self.label_date_show = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_date_show.setGeometry(QtCore.QRect(220, 20, 71, 21))
        self.label_date_show.setObjectName("label_date_show")
        self.label_time = QtWidgets.QLabel(parent=self.group_box_information)
        self.label_time.setGeometry(QtCore.QRect(180, 40, 31, 21))
        self.label_time.setObjectName("label_time")
        
        ''' groupbox selectedd warehouse '''
        self.group_box_selected_warehouse = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.group_box_selected_warehouse.setGeometry(QtCore.QRect(10, 100, 300, 243))
        self.group_box_selected_warehouse.setObjectName("group_box_selected_warehouse")
        self.label_warehouse_information_id = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_id.setGeometry(QtCore.QRect(20, 40, 111, 16))
        self.label_warehouse_information_id.setObjectName("label_warehouse_information_id")
        self.label_warehouse_information_id_show = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_id_show.setGeometry(QtCore.QRect(140, 40, 141, 16))
        self.label_warehouse_information_id_show.setObjectName("label_warehouse_information_id_show")
        self.label_warehouse_information_name = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_name.setGeometry(QtCore.QRect(20, 60, 111, 16))
        self.label_warehouse_information_name.setObjectName("label_warehouse_information_name")
        self.label_warehouse_information_name_show = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_name_show.setGeometry(QtCore.QRect(140, 60, 141, 16))
        self.label_warehouse_information_name_show.setObjectName("label_warehouse_information_name_show")
        self.label_warehouse_information_street_show = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_street_show.setGeometry(QtCore.QRect(140, 80, 131, 16))
        self.label_warehouse_information_street_show.setObjectName("label_warehouse_information_street_show")
        self.label_warehouse_information_city_show = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_city_show.setGeometry(QtCore.QRect(140, 100, 131, 16))
        self.label_warehouse_information_city_show.setObjectName("label_warehouse_information_city_show")
        self.label_warehouse_information_city = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_city.setGeometry(QtCore.QRect(20, 100, 111, 16))
        self.label_warehouse_information_city.setObjectName("label_warehouse_information_city")
        self.label_warehouse_information_street = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_street.setGeometry(QtCore.QRect(20, 80, 111, 16))
        self.label_warehouse_information_street.setObjectName("label_warehouse_information_street")
        self.label_warehouse_information_country_show = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_country_show.setGeometry(QtCore.QRect(140, 120, 141, 16))
        self.label_warehouse_information_country_show.setObjectName("label_warehouse_information_country_show")
        self.label_warehouse_information_country = QtWidgets.QLabel(parent=self.group_box_selected_warehouse)
        self.label_warehouse_information_country.setGeometry(QtCore.QRect(20, 120, 111, 16))
        self.label_warehouse_information_country.setObjectName("label_warehouse_information_country")
        self.push_button_select_warehouse = QtWidgets.QPushButton(parent=self.group_box_selected_warehouse)
        self.push_button_select_warehouse.setGeometry(QtCore.QRect(20, 180, 151, 23))
        self.push_button_select_warehouse.setObjectName("push_button_select_warehouse")
        # funkcija kada se klikne na button poziva funkciju table_show_data
        self.push_button_select_warehouse.clicked.connect(self.table_show_data) 
        
        self.line_edit_select_warehouse = QtWidgets.QLineEdit(parent=self.group_box_selected_warehouse)
        self.line_edit_select_warehouse.setGeometry(QtCore.QRect(20, 150, 151, 20))
        self.line_edit_select_warehouse.setObjectName("line_edit_select_warehouse")

        

        ''' table show warehouse and products - desna tablica na GUIu ''' 
        self.table_show_warehouse_products = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.table_show_warehouse_products.setGeometry(QtCore.QRect(750, 410, 531, 201))
        self.table_show_warehouse_products.setObjectName("table_show_warehouse_products")
        self.table_show_warehouse_products.setColumnCount(0)
        self.table_show_warehouse_products.setRowCount(0)
        self.table_show_warehouse_products.horizontalHeader()
        # array u koji se sprema tablica warehouse/products
        self.table_show_warehouse_products_array = None
        self.table_show_warehouse_products_header = None
        #button za prikaz tablice produkti
        self.button_show_products = QtWidgets.QPushButton(parent=self.centralwidget)
        self.button_show_products.setGeometry(QtCore.QRect(750, 370, 251, 23))
        self.button_show_products.setObjectName("button_show_products")
        self.button_show_products.clicked.connect(self.show_products)
        #button za prikaz tablice skladiste
        self.button_show_warehouses = QtWidgets.QPushButton(parent=self.centralwidget)
        self.button_show_warehouses.setGeometry(QtCore.QRect(1030, 370, 251, 23))
        self.button_show_warehouses.setObjectName("button_show_warehouses")
        # button button_find_warehouse_by_product
        self.button_show_warehouses.clicked.connect(self.show_warehouses)

        
        self.button_find_warehouse_by_product = QtWidgets.QPushButton(parent=self.centralwidget)
        self.button_find_warehouse_by_product.setGeometry(QtCore.QRect(40, 370, 91, 23))
        self.button_find_warehouse_by_product.setObjectName("button_find_warehouse_by_product")
        # klikom na button 'Find' poziva se funkcija koja ispisuje u tablicu proizvode koji
        # matchaju filter, ako ne ostaje ispisana zadnja tablica koja se ucitala u widget
        self.button_find_warehouse_by_product.clicked.connect(self.table_show_data_filter)
        self.edit_find_warehouse_by_product = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.edit_find_warehouse_by_product.setGeometry(QtCore.QRect(140, 370, 181, 20))
        self.edit_find_warehouse_by_product.setObjectName("edit_find_warehouse_by_product")
        self.label_find_warehouse_by_prodcut_name = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_find_warehouse_by_prodcut_name.setGeometry(QtCore.QRect(40, 350, 281, 16))
        self.label_find_warehouse_by_prodcut_name.setObjectName("label_find_warehouse_by_prodcut_name")
        
        ''' groupbox delete warehouse and product '''
        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(970, 100, 300, 241))
        self.groupBox.setObjectName("group_delete_warehouse_product")
        self.label_delete_warehouse = QtWidgets.QLabel(parent=self.groupBox)
        self.label_delete_warehouse.setGeometry(QtCore.QRect(20, 40, 261, 20))
        self.label_delete_warehouse.setObjectName("label_delete_warehouse")
        self.label_delete_products = QtWidgets.QLabel(parent=self.groupBox)
        self.label_delete_products.setGeometry(QtCore.QRect(20, 140, 261, 20))
        self.label_delete_products.setObjectName("label_delete_products")
        #button delete warehouse
        self.button_delete_warehouse = QtWidgets.QPushButton(parent=self.groupBox)
        self.button_delete_warehouse.setGeometry(QtCore.QRect(20, 100, 251, 23))
        self.button_delete_warehouse.setObjectName("button_delete_warehouse")
        self.button_delete_warehouse.clicked.connect(self.delete_warehouse)
        self.edit_delete_warehouse = QtWidgets.QLineEdit(parent=self.groupBox)
        self.edit_delete_warehouse.setGeometry(QtCore.QRect(20, 70, 251, 20))
        self.edit_delete_warehouse.setObjectName("edit_delete_warehouse")
        self.edit_delete_products = QtWidgets.QLineEdit(parent=self.groupBox)
        self.edit_delete_products.setGeometry(QtCore.QRect(20, 170, 251, 20))
        self.edit_delete_products.setObjectName("edit_delete_products")
        self.button_delete_product = QtWidgets.QPushButton(parent=self.groupBox)
        self.button_delete_product.setGeometry(QtCore.QRect(20, 200, 251, 23))
        self.button_delete_product.setObjectName("button_delete_product")
        self.button_delete_product.clicked.connect(self.delete_product)
        
        ''' tab warehouse '''
        self.tab_warehouse = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tab_warehouse.setGeometry(QtCore.QRect(330, 90, 300, 251))
        self.tab_warehouse.setObjectName("tab_warehouse")
        self.tab_add_warehouse = QtWidgets.QWidget()
        self.tab_add_warehouse.setObjectName("tab_add_warehouse")
        # label and edit field - warehouse name
        self.label_warehouse_name = QtWidgets.QLabel(parent=self.tab_add_warehouse)
        self.label_warehouse_name.setGeometry(QtCore.QRect(20, 20, 101, 20))
        self.label_warehouse_name.setObjectName("label_warehouse_name")
        self.line_edit_warehoue_name = QtWidgets.QLineEdit(parent=self.tab_add_warehouse)
        self.line_edit_warehoue_name.setGeometry(QtCore.QRect(130, 20, 151, 20))
        self.line_edit_warehoue_name.setObjectName("line_edit_warehoue_name")
        # label and edit field - warehouse street  
        self.label_warehouse_street = QtWidgets.QLabel(parent=self.tab_add_warehouse)
        self.label_warehouse_street.setGeometry(QtCore.QRect(20, 50, 101, 21))
        self.label_warehouse_street.setObjectName("label_warehouse_street")
        self.line_edit_warehoue_street = QtWidgets.QLineEdit(parent=self.tab_add_warehouse)
        self.line_edit_warehoue_street.setGeometry(QtCore.QRect(130, 50, 151, 20))
        self.line_edit_warehoue_street.setObjectName("line_edit_warehoue_street")
        # label and edit field - warehouse city  
        self.line_edit_warehoue_city = QtWidgets.QLineEdit(parent=self.tab_add_warehouse)
        self.line_edit_warehoue_city.setGeometry(QtCore.QRect(130, 80, 151, 20))
        self.line_edit_warehoue_city.setObjectName("line_edit_warehoue_city")
        self.label_warehouse_city = QtWidgets.QLabel(parent=self.tab_add_warehouse)
        self.label_warehouse_city.setGeometry(QtCore.QRect(20, 80, 101, 20))
        self.label_warehouse_city.setObjectName("label_warehouse_city")
        # label and edit field - warehouse country 
        self.label_warehouse_country = QtWidgets.QLabel(parent=self.tab_add_warehouse)
        self.label_warehouse_country.setGeometry(QtCore.QRect(20, 110, 101, 20))
        self.label_warehouse_country.setObjectName("label_warehouse_country")
        self.line_edit_warehoue_country = QtWidgets.QLineEdit(parent=self.tab_add_warehouse)
        self.line_edit_warehoue_country.setGeometry(QtCore.QRect(130, 110, 151, 20))
        self.line_edit_warehoue_country.setObjectName("line_edit_warehoue_country")
        # button save warehouse
        self.button_save_warehouse = QtWidgets.QPushButton(parent=self.tab_add_warehouse)
        self.button_save_warehouse.setGeometry(QtCore.QRect(20, 150, 261, 23))
        self.button_save_warehouse.setObjectName("button_save_warehouse")
        # button poziva funkciju add_to_database_warehouse
        self.button_save_warehouse.clicked.connect(self.add_to_database_warehouse)
        
        
        # tab edit warehouse
        self.tab_warehouse.addTab(self.tab_add_warehouse, "")
        self.tab_edit_warehouse = QtWidgets.QWidget()
        self.tab_edit_warehouse.setObjectName("tab_edit_warehouse")
        self.label_warehouse_city_edit = QtWidgets.QLabel(parent=self.tab_edit_warehouse)
        self.label_warehouse_city_edit.setGeometry(QtCore.QRect(20, 100, 101, 20))
        self.label_warehouse_city_edit.setObjectName("label_warehouse_city_edit")
        self.label_warehouse_street_edit = QtWidgets.QLabel(parent=self.tab_edit_warehouse)
        self.label_warehouse_street_edit.setGeometry(QtCore.QRect(20, 70, 101, 21))
        self.label_warehouse_street_edit.setObjectName("label_warehouse_street_edit")
        self.label_warehouse_name_edit = QtWidgets.QLabel(parent=self.tab_edit_warehouse)
        self.label_warehouse_name_edit.setGeometry(QtCore.QRect(20, 40, 101, 20))
        self.label_warehouse_name_edit.setObjectName("label_warehouse_name_edit")
        # button koji na click poziva funkciju <blank> koja mijenja value warehouse u databazi
        self.button_edit_warehouse = QtWidgets.QPushButton(parent=self.tab_edit_warehouse)
        self.button_edit_warehouse.setGeometry(QtCore.QRect(20, 170, 261, 23))
        self.button_edit_warehouse.setObjectName("button_edit_warehouse")
        self.button_edit_warehouse.clicked.connect(self.change_warehouse_values)
        self.line_edit_warehoue_city_edit = QtWidgets.QLineEdit(parent=self.tab_edit_warehouse)
        self.line_edit_warehoue_city_edit.setGeometry(QtCore.QRect(130, 100, 151, 20))
        self.line_edit_warehoue_city_edit.setObjectName("line_edit_warehoue_city_edit")
        self.line_edit_warehoue_street_edit = QtWidgets.QLineEdit(parent=self.tab_edit_warehouse)
        self.line_edit_warehoue_street_edit.setGeometry(QtCore.QRect(130, 70, 151, 20))
        self.line_edit_warehoue_street_edit.setObjectName("line_edit_warehoue_street_edit")
        self.line_edit_warehoue_name_edit = QtWidgets.QLineEdit(parent=self.tab_edit_warehouse)
        self.line_edit_warehoue_name_edit.setGeometry(QtCore.QRect(130, 40, 151, 20))
        self.line_edit_warehoue_name_edit.setObjectName("line_edit_warehoue_name_edit")
        self.label_warehouse_country_edit = QtWidgets.QLabel(parent=self.tab_edit_warehouse)
        self.label_warehouse_country_edit.setGeometry(QtCore.QRect(20, 130, 101, 20))
        self.label_warehouse_country_edit.setObjectName("label_warehouse_country_edit")
        self.line_edit_warehoue_country_edit = QtWidgets.QLineEdit(parent=self.tab_edit_warehouse)
        self.line_edit_warehoue_country_edit.setGeometry(QtCore.QRect(130, 130, 151, 20))
        self.line_edit_warehoue_country_edit.setObjectName("line_edit_warehoue_country_edit")
        self.label_warehouse_id_edit = QtWidgets.QLabel(parent=self.tab_edit_warehouse)
        self.label_warehouse_id_edit.setGeometry(QtCore.QRect(20, 10, 101, 20))
        self.label_warehouse_id_edit.setObjectName("label_warehouse_id_edit")
        self.line_edit_warehoue_name_id_edit = QtWidgets.QLineEdit(parent=self.tab_edit_warehouse)
        self.line_edit_warehoue_name_id_edit.setGeometry(QtCore.QRect(130, 10, 151, 20))
        self.line_edit_warehoue_name_id_edit.setObjectName("line_edit_warehoue_name_id_edit")
        self.tab_warehouse.addTab(self.tab_edit_warehouse, "")
        
        ''' tab products '''
        self.tab_products = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tab_products.setGeometry(QtCore.QRect(650, 90, 300, 251))
        self.tab_products.setObjectName("tab_products")
        
        ''' tab add products '''
        self.tab_add_product = QtWidgets.QWidget()
        self.tab_add_product.setObjectName("tab_add_product")
        self.line_edit_products_warehouse_id = QtWidgets.QLineEdit(parent=self.tab_add_product)
        self.line_edit_products_warehouse_id.setGeometry(QtCore.QRect(100, 20, 181, 20))
        self.line_edit_products_warehouse_id.setObjectName("line_edit_products_warehouse_id")
        self.label_product_warehouse_id = QtWidgets.QLabel(parent=self.tab_add_product)
        self.label_product_warehouse_id.setGeometry(QtCore.QRect(20, 20, 71, 20))
        self.label_product_warehouse_id.setObjectName("label_product_warehouse_id")
        self.line_edit_products_quantity = QtWidgets.QLineEdit(parent=self.tab_add_product)
        self.line_edit_products_quantity.setGeometry(QtCore.QRect(100, 110, 181, 20))
        self.line_edit_products_quantity.setObjectName("line_edit_products_quantity")
        self.line_edit_products_category = QtWidgets.QLineEdit(parent=self.tab_add_product)
        self.line_edit_products_category.setGeometry(QtCore.QRect(100, 140, 181, 20))
        self.line_edit_products_category.setObjectName("line_edit_products_category")
        self.label_product_name = QtWidgets.QLabel(parent=self.tab_add_product)
        self.label_product_name.setGeometry(QtCore.QRect(20, 50, 71, 21))
        self.label_product_name.setObjectName("label_product_name")
        self.label_product_quantity = QtWidgets.QLabel(parent=self.tab_add_product)
        self.label_product_quantity.setGeometry(QtCore.QRect(20, 110, 71, 21))
        self.label_product_quantity.setScaledContents(False)
        self.label_product_quantity.setWordWrap(False)
        self.label_product_quantity.setObjectName("label_product_quantity")
        self.line_edit_products_name = QtWidgets.QLineEdit(parent=self.tab_add_product)
        self.line_edit_products_name.setGeometry(QtCore.QRect(100, 50, 181, 20))
        self.line_edit_products_name.setObjectName("line_edit_products_name")
        self.button_save_product = QtWidgets.QPushButton(parent=self.tab_add_product)
        self.button_save_product.setGeometry(QtCore.QRect(20, 170, 261, 23))
        self.button_save_product.setObjectName("button_save_product")
        
        # button koji na klick poziva funkciju add_to_database_products 
        self.button_save_product.clicked.connect(self.add_to_database_products)
        self.line_edit_products_price = QtWidgets.QLineEdit(parent=self.tab_add_product)
        self.line_edit_products_price.setGeometry(QtCore.QRect(100, 80, 181, 20))
        self.line_edit_products_price.setObjectName("line_edit_products_price")
        self.label_product_category = QtWidgets.QLabel(parent=self.tab_add_product)
        self.label_product_category.setGeometry(QtCore.QRect(20, 140, 71, 21))
        self.label_product_category.setScaledContents(False)
        self.label_product_category.setWordWrap(False)
        self.label_product_category.setObjectName("label_product_category")
        self.label_product_price = QtWidgets.QLabel(parent=self.tab_add_product)
        self.label_product_price.setGeometry(QtCore.QRect(20, 80, 71, 21))
        self.label_product_price.setObjectName("label_product_price")
        
        # tab edit products
        self.tab_products.addTab(self.tab_add_product, "")
        self.tab_edit_product = QtWidgets.QWidget()
        self.tab_edit_product.setObjectName("tab_edit_product")
        self.label_product_name_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_name_edit.setGeometry(QtCore.QRect(20, 70, 71, 21))
        self.label_product_name_edit.setObjectName("label_product_name_edit")
        self.label_product_price_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_price_edit.setGeometry(QtCore.QRect(20, 100, 71, 21))
        self.label_product_price_edit.setObjectName("label_product_price_edit")
        self.label_product_warehouse_id_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_warehouse_id_edit.setGeometry(QtCore.QRect(20, 40, 71, 20))
        self.label_product_warehouse_id_edit.setObjectName("label_product_warehouse_id_edit")
        self.label_product_quantity_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_quantity_edit.setGeometry(QtCore.QRect(20, 130, 71, 21))
        self.label_product_quantity_edit.setScaledContents(False)
        self.label_product_quantity_edit.setWordWrap(False)
        self.label_product_quantity_edit.setObjectName("label_product_quantity_edit")
        self.line_edit_products_price_edit = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_products_price_edit.setGeometry(QtCore.QRect(100, 100, 181, 20))
        self.line_edit_products_price_edit.setObjectName("line_edit_products_price_edit")
        self.label_product_category_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_category_edit.setGeometry(QtCore.QRect(20, 160, 71, 21))
        self.label_product_category_edit.setScaledContents(False)
        self.label_product_category_edit.setWordWrap(False)
        self.label_product_category_edit.setObjectName("label_product_category_edit")
        self.line_edit_products_category_edit = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_products_category_edit.setGeometry(QtCore.QRect(100, 160, 181, 20))
        self.line_edit_products_category_edit.setObjectName("line_edit_products_category_edit")
        self.line_edit_products_quantity_edit = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_products_quantity_edit.setGeometry(QtCore.QRect(100, 130, 181, 20))
        self.line_edit_products_quantity_edit.setObjectName("line_edit_products_quantity_edit")
        
        # button koji na click poziva funkciju 'change_product_values'
        self.button_edit_products = QtWidgets.QPushButton(parent=self.tab_edit_product)
        self.button_edit_products.setGeometry(QtCore.QRect(20, 190, 261, 23))
        self.button_edit_products.setObjectName("button_edit_products")
        self.button_edit_products.clicked.connect(self.change_product_values)
        
        self.line_edit_products_name_edit = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_products_name_edit.setGeometry(QtCore.QRect(100, 70, 181, 20))
        self.line_edit_products_name_edit.setObjectName("line_edit_products_name_edit")
        self.line_edit_products_warehouse_id_edit = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_products_warehouse_id_edit.setGeometry(QtCore.QRect(100, 40, 181, 20))
        self.line_edit_products_warehouse_id_edit.setObjectName("line_edit_products_warehouse_id_edit")
        self.label_product_id_edit = QtWidgets.QLabel(parent=self.tab_edit_product)
        self.label_product_id_edit.setGeometry(QtCore.QRect(20, 10, 71, 20))
        self.label_product_id_edit.setObjectName("label_product_id_edit")
        self.line_edit_product_id = QtWidgets.QLineEdit(parent=self.tab_edit_product)
        self.line_edit_product_id.setGeometry(QtCore.QRect(100, 10, 181, 20))
        self.line_edit_product_id.setObjectName("line_edit_product_id")
        self.tab_products.addTab(self.tab_edit_product, "")
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        ''' menu bar widget - trenutno prazan i ne vidi se'''
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setEnabled(True)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1300, 21))
        self.menubar.setDefaultUp(False)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionQuit = QtGui.QAction(parent=MainWindow)
        self.actionQuit.setObjectName("actionQuit")

        self.retranslateUi(MainWindow)
        
        # postavlja otvorene tabove na add warehouse, and add product
        self.tab_warehouse.setCurrentIndex(0)
        self.tab_products.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    ''' Custom funkcije  '''

    # funkcija koja se poziva kada se klikne na header tablice 'table_proizvodi' koja naknadno poziva funkciju
    # update table
    def sort_table(self, logical_index):
        # mijenja redosljed sortiranja
        self.sort_order = QtCore.Qt.SortOrder.DescendingOrder if self.sort_order == QtCore.Qt.SortOrder.AscendingOrder else QtCore.Qt.SortOrder.AscendingOrder
        self.table_proizvodi_array.sort(key=lambda x: x[logical_index], reverse=self.sort_order == QtCore.Qt.SortOrder.DescendingOrder)
        self.update_table()

    # funkcija koja se poziva nakon funkcije 'def sort_table()' te ona azurira podatke
    # u tablici 'table_proizvodi'
    def update_table(self):
        self.table_proizvodi.clear()
        self.table_proizvodi.setRowCount(len(self.table_proizvodi_array))
        self.table_proizvodi.setColumnCount(len(self.table_proizvodi_array[0]))
        self.table_proizvodi.setHorizontalHeaderLabels(self.header)
        
        for row, data in enumerate(self.table_proizvodi_array):
            for col, value in enumerate(data):
                item = QtWidgets.QTableWidgetItem(str(value))
                self.table_proizvodi.setItem(row, col, item)
            
    def table_show_data(self):     
        warehouse_id = self.line_edit_select_warehouse.text()
        
        if not warehouse_id:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "You need to enter warehouse id!")
            return
        
        warehouse_id = int(warehouse_id)
        print('warehouse id: ', warehouse_id)
        # sprema tablicu 'self.table_proizvodi_array' i header tablice u self 'self.header' za
        # kasniju upotrebu kod sortiranja

        self.table_proizvodi_array, self.header, list_of_skladiste_id = get_table(warehouse_id)
        print(self.table_proizvodi_array)
        print(self.header)
        print("Print count_skladiste_id {}".format(list_of_skladiste_id))

        if warehouse_id not in list_of_skladiste_id:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Not warehouse is not in database")
            print("Ne postji skladiste sa indexom {}".format(warehouse_id))
        else:
            
            number_of_rows = len(self.table_proizvodi_array)
            number_of_columns = len(self.table_proizvodi_array[0]) if number_of_rows > 0 else 0
            
            self.table_proizvodi.setRowCount(number_of_rows)
            self.table_proizvodi.setColumnCount(number_of_columns)
            self.table_proizvodi.setHorizontalHeaderLabels(self.header)
            
            for x, row in enumerate(self.table_proizvodi_array):
                for y, column_value in enumerate(row):
                    value = QtWidgets .QTableWidgetItem(str(column_value))
                    self.table_proizvodi.setItem(x, y, value)
            
            # update information labela
            print("Prije crasha")
            print(self.table_proizvodi_array)
            
            if not self.table_proizvodi_array:
                QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Warehouse by id: {warehouse_id} has no products!")
            else:
                self.label_warehouse_information_id_show.setText(str(self.table_proizvodi_array[0][0]))
                self.label_warehouse_information_name_show.setText(str(self.table_proizvodi_array[0][1]))
                self.label_warehouse_information_street_show.setText(str(self.table_proizvodi_array[0][2]))
                self.label_warehouse_information_city_show.setText(str(self.table_proizvodi_array[0][3]))
                self.label_warehouse_information_country_show.setText(str(self.table_proizvodi_array[0][4]))    
        
    def table_show_data_filter(self):
        product_filter = self.edit_find_warehouse_by_product.text()
        
        self.table_filter_array, self.table_filter_header, has_result = get_table_by_filter(product_filter)
        
        if has_result == False:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Not found in database")
        else:
            number_of_rows = len(self.table_filter_array)
            number_of_columns = len(self.table_filter_array[0]) if number_of_rows > 0 else 0
            
            self.table_proizvodi.setRowCount(number_of_rows)
            self.table_proizvodi.setColumnCount(number_of_columns)
            self.table_proizvodi.setHorizontalHeaderLabels(self.table_filter_header)
            
            for x, row in enumerate(self.table_filter_array):
                for y, column_value in enumerate(row):
                    value = QtWidgets .QTableWidgetItem(str(column_value))
                    self.table_proizvodi.setItem(x, y, value)
                

    def add_to_database_products(self):
        import_product(self.line_edit_products_warehouse_id.text(),
                        self.line_edit_products_name.text(),
                        self.line_edit_products_price.text(),
                        self.line_edit_products_quantity.text(),
                        self.line_edit_products_category.text())

    def add_to_database_warehouse(self):
        print("Add add_to_database_warehouse clicked!")
        import_warehouse(self.line_edit_warehoue_name.text(),
                         self.line_edit_warehoue_street.text(),
                         self.line_edit_warehoue_city.text(),
                         self.line_edit_warehoue_country.text())

    def change_product_values(self):
        if update_product(self.line_edit_product_id.text(),
                            self.line_edit_products_warehouse_id_edit.text(),
                            self.line_edit_products_name_edit.text(),
                            self.line_edit_products_price_edit.text(),
                            self.line_edit_products_quantity_edit.text(),
                            self.line_edit_products_category_edit.text()) == True:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Success", "Product updated!")
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Product do not exist in database!")

    def change_warehouse_values(self):
        if update_warehouse(self.line_edit_warehoue_name_id_edit.text(),
                            self.line_edit_warehoue_name_edit.text(),
                            self.line_edit_warehoue_street_edit.text(),
                            self.line_edit_warehoue_city_edit.text(),
                            self.line_edit_warehoue_country_edit.text()) == True:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Success", "Warehouse updated!")
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", "Warehouse do not exist in database!")
    
    def delete_product(self):
        if delete_product_by_id(self.edit_delete_products.text()) == True:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Success", "Product deleted!")
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Product with id: {self.edit_delete_products.text()} is not in database!")

    def delete_warehouse(self):
        if delete_warehouse_by_id(self.edit_delete_warehouse.text()) == True:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Success", "Product deleted!")
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Product with id: {self.edit_delete_warehouse.text()} is not in database!")
    
    
    def show_warehouses(self):
        self.table_show_warehouse_products_array, self.table_show_warehouse_products_header = show_table("warehouse") 
        
        number_of_rows = len(self.table_show_warehouse_products_array)
        number_of_columns = len(self.table_show_warehouse_products_array[0]) if number_of_rows > 0 else 0
            
        self.table_show_warehouse_products.setRowCount(number_of_rows)
        self.table_show_warehouse_products.setColumnCount(number_of_columns)
        self.table_show_warehouse_products.setHorizontalHeaderLabels(self.table_show_warehouse_products_header)
        
        for x, row in enumerate(self.table_show_warehouse_products_array):
            for y, column_value in enumerate(row):
                value = QtWidgets .QTableWidgetItem(str(column_value))
                self.table_show_warehouse_products.setItem(x, y, value)

    
    def show_products(self):
        self.table_show_warehouse_products_array, self.table_show_warehouse_products_header= show_table("product") 
        
        number_of_rows = len(self.table_show_warehouse_products_array)
        number_of_columns = len(self.table_show_warehouse_products_array[0]) if number_of_rows > 0 else 0
            
        self.table_show_warehouse_products.setRowCount(number_of_rows)
        self.table_show_warehouse_products.setColumnCount(number_of_columns)
        self.table_show_warehouse_products.setHorizontalHeaderLabels(self.table_show_warehouse_products_header)
        
        for x, row in enumerate(self.table_show_warehouse_products_array):
            for y, column_value in enumerate(row):
                value = QtWidgets .QTableWidgetItem(str(column_value))
                self.table_show_warehouse_products.setItem(x, y, value)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.group_box_information.setTitle(_translate("MainWindow", "Information"))
        self.label_active_user.setText(_translate("MainWindow", "Active user:"))
        self.label_active_language.setText(_translate("MainWindow", "Language:"))
        self.label_date.setText(_translate("MainWindow", "Date:"))
        self.label_time_show.setText(_translate("MainWindow", "None"))
        self.label_date_show.setText(_translate("MainWindow", "None"))
        self.label_time.setText(_translate("MainWindow", "Time:"))
        self.group_box_selected_warehouse.setTitle(_translate("MainWindow", "Selected warehouse information"))
        self.label_warehouse_information_id.setText(_translate("MainWindow", "Warehouse id"))
        self.label_warehouse_information_id_show.setText(_translate("MainWindow", "None"))
        self.label_warehouse_information_name.setText(_translate("MainWindow", "Warehouse name"))
        self.label_warehouse_information_name_show.setText(_translate("MainWindow", "None"))
        self.label_warehouse_information_street_show.setText(_translate("MainWindow", "None"))
        self.label_warehouse_information_city_show.setText(_translate("MainWindow", "None"))
        self.label_warehouse_information_city.setText(_translate("MainWindow", "Warehouse city"))
        self.label_warehouse_information_street.setText(_translate("MainWindow", "Warehouse street"))
        self.label_warehouse_information_country_show.setText(_translate("MainWindow", "None"))
        self.label_warehouse_information_country.setText(_translate("MainWindow", "Warehouse country"))
        self.push_button_select_warehouse.setText(_translate("MainWindow", "Select warehouse"))
        self.button_show_products.setText(_translate("MainWindow", "Show Products"))
        self.button_show_warehouses.setText(_translate("MainWindow", "Show warehouses"))
        self.button_find_warehouse_by_product.setText(_translate("MainWindow", "Find"))
        self.label_find_warehouse_by_prodcut_name.setText(_translate("MainWindow", "Find warehouse by product name"))
        self.groupBox.setTitle(_translate("MainWindow", "Delete warehouse or product"))
        self.label_delete_warehouse.setText(_translate("MainWindow", "Delete by warehousue id"))
        self.label_delete_products.setText(_translate("MainWindow", "Delete by product id"))
        self.button_delete_warehouse.setText(_translate("MainWindow", "Delete warehouse"))
        self.button_delete_product.setText(_translate("MainWindow", "Delete product"))
        self.label_warehouse_city.setText(_translate("MainWindow", "Warehouse city"))
        self.label_warehouse_street.setText(_translate("MainWindow", "Warehouse street"))
        self.label_warehouse_name.setText(_translate("MainWindow", "Warehouse name"))
        self.button_save_warehouse.setText(_translate("MainWindow", "Save"))
        self.label_warehouse_country.setText(_translate("MainWindow", "Warehouse country"))
        self.tab_warehouse.setTabText(self.tab_warehouse.indexOf(self.tab_add_warehouse), _translate("MainWindow", "Add warehouse"))
        self.label_warehouse_city_edit.setText(_translate("MainWindow", "Warehouse city"))
        self.label_warehouse_street_edit.setText(_translate("MainWindow", "Warehouse street"))
        self.label_warehouse_name_edit.setText(_translate("MainWindow", "Warehouse name"))
        self.button_edit_warehouse.setText(_translate("MainWindow", "Edit"))
        self.label_warehouse_country_edit.setText(_translate("MainWindow", "Warehouse country"))
        self.label_warehouse_id_edit.setText(_translate("MainWindow", "Warehouse id"))
        self.tab_warehouse.setTabText(self.tab_warehouse.indexOf(self.tab_edit_warehouse), _translate("MainWindow", "Edit warehouse"))
        self.label_product_warehouse_id.setText(_translate("MainWindow", "Warehouse id"))
        self.label_product_name.setText(_translate("MainWindow", "Name"))
        self.label_product_quantity.setText(_translate("MainWindow", "Quantity"))
        self.button_save_product.setText(_translate("MainWindow", "Save"))
        self.label_product_category.setText(_translate("MainWindow", "Categorty"))
        self.label_product_price.setText(_translate("MainWindow", "Price"))
        self.tab_products.setTabText(self.tab_products.indexOf(self.tab_add_product), _translate("MainWindow", "Add product"))
        self.label_product_name_edit.setText(_translate("MainWindow", "Name"))
        self.label_product_price_edit.setText(_translate("MainWindow", "Price"))
        self.label_product_warehouse_id_edit.setText(_translate("MainWindow", "Warehouse id"))
        self.label_product_quantity_edit.setText(_translate("MainWindow", "Quantity"))
        self.label_product_category_edit.setText(_translate("MainWindow", "Categorty"))
        self.button_edit_products.setText(_translate("MainWindow", "Edit"))
        self.label_product_id_edit.setText(_translate("MainWindow", "Product id"))
        self.tab_products.setTabText(self.tab_products.indexOf(self.tab_edit_product), _translate("MainWindow", "Edit product"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
